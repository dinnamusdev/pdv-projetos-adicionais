/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package smack.config;

import br.com.log.LogDinnamus;
import br.com.ui.MetodosUI_Auxiliares_1;
import br.manipulararquivos.ManipulacaoArquivo;
import java.awt.CardLayout;
import java.io.IOException;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.ListModel;
import javax.xml.parsers.ParserConfigurationException;
import org.jivesoftware.smack.ConnectionListener;
import org.jivesoftware.smack.SmackException;
import org.jivesoftware.smack.StanzaListener;
import org.jivesoftware.smack.XMPPConnection;
import org.jivesoftware.smack.chat.Chat;
import org.jivesoftware.smack.chat.ChatManagerListener;
import org.jivesoftware.smack.chat.ChatMessageListener;
import org.jivesoftware.smack.packet.DefaultExtensionElement;
import org.jivesoftware.smack.packet.Message;
import org.jivesoftware.smack.packet.Presence;
import org.jivesoftware.smack.packet.Stanza;
import org.jivesoftware.smack.roster.RosterEntry;
import org.jivesoftware.smack.roster.RosterListener;
import org.jivesoftware.smackx.ping.PingManager;
import org.jivesoftware.smackx.receipts.DeliveryReceiptManager;
import org.jivesoftware.smackx.receipts.DeliveryReceiptManager.AutoReceiptMode;
import org.jivesoftware.smackx.receipts.DeliveryReceiptRequest;
import org.jivesoftware.smackx.receipts.ReceiptReceivedListener;
import org.jivesoftware.smackx.vcardtemp.packet.VCard;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import smack.br.ui.ManipularXML;
import smack.br.ui.SmackMensagem;
import smack.br.ui.SmackListItemContato;
import smack.br.ui.SmackListRender;
import smack.br.ui.SmackListRenderMensagem;

/**
 *
 * @author DSWM
 */
public class frmChat extends javax.swing.JFrame {

    /**
     * Creates new form frmChat
     */
    private SmackMensageria smackMensageria = new SmackMensageria();
    private SmackMensagem smackListItem = new SmackMensagem();
    private Integer porta;
    private String nomeServico, servidorOpenFire, usuarioServidor, senhaServidor;
    private HashMap<String, Chat> chatsAbertos = new HashMap<>();
    private HashMap<String, ArrayList<SmackMensagem>> conversasDoChat = new HashMap<>();

    private HashMap<String, Integer> qtmensagemNaoLidas = new HashMap<>();
    private String usuario, senha, nome, nomeArquivoAvatar;
    private HashMap<String, String> atributos = new HashMap<>();
    boolean iniciar = false;
    private VCard VCardDadosUsuario;
    private SmackListItemContato selectedtemContato;
    private HashMap<String, SmackListItemContato> contatos = new HashMap<>();
    private frmCarregandoChat _frmCarregandoChat = null;
    private IconeCircular iconeCircular = new IconeCircular();
    boolean iniciando = false;

    public frmChat() {

    }

    public frmChat(java.awt.Frame parent, boolean modal,
            String nomeServico, String servidorOpenFire, Integer porta,
            String usuarioServidor, String senhaServidor, String usuario,
            String senha, String nome, String nomeArquivoAvatar, boolean iniciar) {
        // super(parent, modal);
        iniciando = true;
        initComponents();
        this.nomeServico = nomeServico;
        this.servidorOpenFire = servidorOpenFire;
        this.usuarioServidor = usuarioServidor;
        this.senhaServidor = senhaServidor;
        this.porta = porta;
        this.usuario = usuario;
        this.senha = senha;
        this.nomeArquivoAvatar = nomeArquivoAvatar;
        this.nome = nome;
        this.iniciar = iniciar;
        txtUsuario.setText(nome);
        _frmCarregandoChat = new frmCarregandoChat(this, false);
        _frmCarregandoChat.setVisible(true);
        _frmCarregandoChat.lblMensagem1.setText("Conectando servidor....");
        _frmCarregandoChat.lblMensagem2.setText("");
        iniciarUI();
        iniciando = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        btConectar = new javax.swing.JButton();
        PainelPrincipal = new javax.swing.JPanel();
        PainelTitulo = new javax.swing.JPanel();
        btFechar1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        lblLogo = new javax.swing.JLabel();
        btOcultar = new javax.swing.JButton();
        lblConectado = new javax.swing.JLabel();
        PainelCorpo = new javax.swing.JPanel();
        Conversa = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlConversa = new javax.swing.JList<>();
        PainelMensagem = new javax.swing.JPanel();
        btEnviar = new javax.swing.JButton();
        Mensagem = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtMensagem = new javax.swing.JTextArea();
        PainelContatoConversa = new javax.swing.JPanel();
        lblFotoContato = new javax.swing.JLabel();
        lblNomeContato = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        Contatos = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jlContatos = new javax.swing.JList<>();
        PainelNovoContato = new javax.swing.JPanel();
        btAdicionarContato = new javax.swing.JButton();
        btRemover = new javax.swing.JButton();
        PainelUsuario = new javax.swing.JPanel();
        btDadosUsuario = new javax.swing.JButton();
        txtUsuario = new javax.swing.JLabel();

        btConectar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smack/ui/icons8-login-16.png"))); // NOI18N
        btConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConectarActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(445, 526));
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(445, 526));
        setResizable(false);
        setSize(new java.awt.Dimension(445, 526));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        PainelPrincipal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        PainelPrincipal.setLayout(new java.awt.GridBagLayout());

        PainelTitulo.setBackground(new java.awt.Color(0, 0, 0));
        PainelTitulo.setLayout(new java.awt.GridBagLayout());

        btFechar1.setBackground(new java.awt.Color(0, 0, 0));
        btFechar1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btFechar1.setForeground(new java.awt.Color(255, 255, 255));
        btFechar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smack/ui/icons8-shutdown-16.png"))); // NOI18N
        btFechar1.setMnemonic('F');
        btFechar1.setOpaque(false);
        btFechar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFechar1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        PainelTitulo.add(btFechar1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 0.1;
        PainelTitulo.add(jLabel5, gridBagConstraints);

        lblLogo.setBackground(new java.awt.Color(255, 255, 204));
        lblLogo.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        lblLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smack/ui/logodinnamus.JPG"))); // NOI18N
        lblLogo.setMaximumSize(new java.awt.Dimension(280, 38));
        lblLogo.setMinimumSize(new java.awt.Dimension(280, 38));
        lblLogo.setPreferredSize(new java.awt.Dimension(280, 38));
        lblLogo.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                lblLogoMouseDragged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.4;
        PainelTitulo.add(lblLogo, gridBagConstraints);

        btOcultar.setBackground(new java.awt.Color(0, 0, 0));
        btOcultar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btOcultar.setForeground(new java.awt.Color(255, 255, 255));
        btOcultar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smack/ui/icons8-minimize-window-16(1).png"))); // NOI18N
        btOcultar.setMnemonic('F');
        btOcultar.setOpaque(false);
        btOcultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btOcultarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        PainelTitulo.add(btOcultar, gridBagConstraints);

        lblConectado.setBackground(new java.awt.Color(255, 255, 204));
        lblConectado.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        lblConectado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smack/ui/offline.png"))); // NOI18N
        lblConectado.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                lblConectadoMouseDragged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 9, 0, 9);
        PainelTitulo.add(lblConectado, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        PainelPrincipal.add(PainelTitulo, gridBagConstraints);

        PainelCorpo.setBackground(new java.awt.Color(255, 255, 255));
        PainelCorpo.setLayout(new java.awt.CardLayout());

        Conversa.setBackground(new java.awt.Color(255, 255, 255));
        Conversa.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Conversa.setLayout(new java.awt.GridBagLayout());

        jlConversa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlConversaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jlConversa);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 10;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.4;
        Conversa.add(jScrollPane1, gridBagConstraints);

        PainelMensagem.setLayout(new java.awt.GridBagLayout());

        btEnviar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smack/ui/icons8-enviar-e-mail-24.png"))); // NOI18N
        btEnviar.setEnabled(false);
        btEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEnviarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        PainelMensagem.add(btEnviar, gridBagConstraints);

        Mensagem.setLayout(new java.awt.GridBagLayout());

        txtMensagem.setColumns(20);
        txtMensagem.setRows(2);
        jScrollPane3.setViewportView(txtMensagem);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        Mensagem.add(jScrollPane3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        PainelMensagem.add(Mensagem, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        Conversa.add(PainelMensagem, gridBagConstraints);

        PainelContatoConversa.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 0.1;
        PainelContatoConversa.add(lblFotoContato, gridBagConstraints);

        lblNomeContato.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3;
        PainelContatoConversa.add(lblNomeContato, gridBagConstraints);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smack/ui/icons8-back-arrow-16.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        PainelContatoConversa.add(jButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        Conversa.add(PainelContatoConversa, gridBagConstraints);

        PainelCorpo.add(Conversa, "PainelConversa");

        Contatos.setBackground(new java.awt.Color(204, 204, 255));
        Contatos.setLayout(new java.awt.GridBagLayout());

        jScrollPane2.setBorder(null);

        jlContatos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlContatosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jlContatos);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        Contatos.add(jScrollPane2, gridBagConstraints);

        PainelNovoContato.setBackground(new java.awt.Color(255, 255, 255));
        PainelNovoContato.setLayout(new java.awt.GridBagLayout());

        btAdicionarContato.setText("+");
        btAdicionarContato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAdicionarContatoActionPerformed(evt);
            }
        });
        PainelNovoContato.add(btAdicionarContato, new java.awt.GridBagConstraints());

        btRemover.setText("-");
        btRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRemoverActionPerformed(evt);
            }
        });
        PainelNovoContato.add(btRemover, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        Contatos.add(PainelNovoContato, gridBagConstraints);

        PainelUsuario.setBackground(new java.awt.Color(255, 255, 204));
        PainelUsuario.setLayout(new java.awt.GridBagLayout());

        btDadosUsuario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smack/ui/icons8-usuário-30.png"))); // NOI18N
        btDadosUsuario.setBorder(null);
        btDadosUsuario.setBorderPainted(false);
        btDadosUsuario.setContentAreaFilled(false);
        btDadosUsuario.setFocusPainted(false);
        btDadosUsuario.setMaximumSize(new java.awt.Dimension(71, 71));
        btDadosUsuario.setMinimumSize(new java.awt.Dimension(71, 71));
        btDadosUsuario.setPreferredSize(new java.awt.Dimension(71, 71));
        btDadosUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDadosUsuarioActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        PainelUsuario.add(btDadosUsuario, gridBagConstraints);

        txtUsuario.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 9;
        PainelUsuario.add(txtUsuario, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        Contatos.add(PainelUsuario, gridBagConstraints);

        PainelCorpo.add(Contatos, "PainelContatos");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.4;
        gridBagConstraints.weighty = 1.2;
        PainelPrincipal.add(PainelCorpo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        getContentPane().add(PainelPrincipal, gridBagConstraints);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btFechar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFechar1ActionPerformed

        if (smackMensageria != null && smackMensageria.getConnection() != null) {
            try {

                executorService.shutdownNow();

                if (smackMensageria.getConnection().isAuthenticated()) {
                    Presence presence = new Presence(org.jivesoftware.smack.packet.Presence.Type.unavailable);
                    presence.setStatus("unavailable");
                    smackMensageria.getConnection().sendStanza(presence);
                    smackMensageria.getConnection().disconnect(new Presence(Presence.Type.unavailable));
                }
            } catch (SmackException.NotConnectedException ex) {
                LogDinnamus.Log(ex, true);
                try {
                    if (smackMensageria.getConnection().isAuthenticated()) {
                        smackMensageria.getConnection().disconnect(new Presence(Presence.Type.unavailable));
                    }
                } catch (SmackException.NotConnectedException ex1) {
                    LogDinnamus.Log(ex, true);
                }
            }
        }
        // this.dispose();
        System.exit(0);

    }//GEN-LAST:event_btFechar1ActionPerformed
    private boolean conectado = false;
    private void btConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConectarActionPerformed
        // TODO add your handling code here:if
        try {
            if (!conectado) {
                String senha = this.senha;
                String usuario = this.usuario;
                if (usuario.length() > 0 && senha.trim().length() > 0) {
                    if (_frmCarregandoChat != null) {
                        _frmCarregandoChat.lblMensagem2.setText("logando usuário....");
                    }
                    boolean conectarServidor = conectarServidor(usuario, senha, atributos);

                    atributos = null;

                    if (conectarServidor) {
                        conectado = true;
                        btEnviar.setEnabled(true);
                    } else {
                        if (_frmCarregandoChat != null) {
                            _frmCarregandoChat.dispose();
                        }
                        MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Não foi possível conectar o servidor " + this.servidorOpenFire + (smackMensageria.getMsg() != null && smackMensageria.getMsg().length() > 0 ? "\nMotivo : " + smackMensageria.getMsg() : ""), "Procedimento não realizado");
                        dispose();
                        System.exit(0);
                    }
                } else {
                    if (_frmCarregandoChat != null) {
                        _frmCarregandoChat.dispose();
                    }
                    MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Usuário/Senha inválido ou não informado", "Procedimento não realizado");

                }
            } else {
                btConectar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smack/ui/icons8-login-16.png"))); // NOI18N
                btEnviar.setEnabled(false);
                conectado = false;
                DefaultListModel model = (DefaultListModel) jlContatos.getModel();
                if (model != null) {
                    model.clear();
                }
                if (smackMensageria.getConnection() != null) {

                    smackMensageria.getConnection().disconnect(new Presence(Presence.Type.unavailable));
                }
                jlContatos.setModel(model);
            }

        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        } finally {

        }


    }//GEN-LAST:event_btConectarActionPerformed

    private void btEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEnviarActionPerformed
        // TODO add your handling code here:
        //smackMensageria.enviarMensagem(nomeServico)
        try {
            if (txtMensagem.getText() != null && txtMensagem.getText().trim().length() > 0) {
                //SmackListItemContato selectedValue = jlContatos.getSelectedValue();
                if (selectedtemContato != null) {

                    if (!chatsAbertos.containsKey(selectedtemContato.getUsuario())) {
                        iniciarChat(selectedtemContato.getUsuario());
                    }

                    DefaultExtensionElement extTime = new DefaultExtensionElement("time", "urn:xmpp:time");
                    Chat getChat = chatsAbertos.get(selectedtemContato.getUsuario());
                    Message message = new Message();
                    String msgUTF = new String(txtMensagem.getText().trim().getBytes("UTF-8"));
                    message.setBody(msgUTF);

                    String messageTimeStamp = String.valueOf(System.currentTimeMillis());
                    extTime.setValue("time", messageTimeStamp);
                    message.addExtension(extTime);

                    //message.addExtension(new DeliveryReceipt(id));
                    String[] split = selectedtemContato.getUsuario().split("@");
                    String destinatario = "";
                    if (split != null && split.length > 0) {
                        destinatario = split[0];
                    }
                    String[] fromUserSplit = smackMensageria.getUsuario().split("@");
                    String fromUser = "";
                    if (fromUserSplit != null) {
                        fromUser = fromUserSplit[0];
                    }

                    message.setTo(selectedtemContato.getUsuario() + "/Smack");
                    message.setFrom(smackMensageria.getUsuario());
                    DeliveryReceiptManager.receiptMessageFor(message);
                    getChat.sendMessage(message);

                    message.setFrom(smackMensageria.getUsuario());
                    
                    processarMensagemEnviada(message, selectedtemContato.getUsuario());
                    atualizarJlMensagens(selectedtemContato.getUsuario());
                    txtMensagem.setText("");
                    txtMensagem.requestFocus();

                }
            }

        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }

    }//GEN-LAST:event_btEnviarActionPerformed

    private void btDadosUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDadosUsuarioActionPerformed
        // TODO add your handling code here:
        try {
            Propriedades p = new Propriedades();
            Properties propriedades = p.getPropriedadesPorArquivo("configuracoes.properties");

            String usuarioChat = propriedades.getProperty("usuario");
            String nomechat = propriedades.getProperty("nome");
            String senhaChat = propriedades.getProperty("senha");

            frmChatCadastrarUsuario frmChatCadastrarUsuario = new frmChatCadastrarUsuario(null, true, usuarioChat, nomechat, senhaChat);
            if (VCardDadosUsuario.getAvatar() != null && VCardDadosUsuario.getAvatar().length > 0) {
                frmChatCadastrarUsuario.atualizarFoto(VCardDadosUsuario.getAvatar());

            }
            frmChatCadastrarUsuario.setVisible(true);
            if (frmChatCadastrarUsuario.ok) {
                String senhaNova = String.valueOf(frmChatCadastrarUsuario.txtSenha.getPassword());
                if (!senhaChat.equals(senhaNova)) {
                    if (!smackMensageria.modificarSenha(senhaNova)) {
                        MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Não foi possível modificar a senha", "Senha não modificada");

                        return;
                    }
                    p.setPropriedades("configuracoes.properties", "senha", senhaNova);
                }

                String nomeNovo = frmChatCadastrarUsuario.txtUsuarioNome.getText();
                if (!nomeNovo.equals(nomechat)) {
                    HashMap<String, String> atributos = new HashMap<>();
                    atributos.put("nickname", nomeNovo);
                    if (!smackMensageria.modificarAtributos(atributos)) {

                        MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Não foi possível modificar os atributos do usuário", "Atributos não modificados");

                        return;
                    }

                    p.setPropriedades("configuracoes.properties", "nome", nomeNovo);
                    txtUsuario.setText(nomeNovo);
                }
                if (frmChatCadastrarUsuario.nomeArquivoAvatar.trim().length() > 0) {
                    if (!smackMensageria.definirAvatar(frmChatCadastrarUsuario.nomeArquivoAvatar)) {

                        MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Não foi possível modificar a imagem do usuário", "Atributos não modificados");

                        return;
                    }
                    VCardDadosUsuario = smackMensageria.getVCard();
                    if (VCardDadosUsuario.getAvatar() != null && VCardDadosUsuario.getAvatar().length > 0) {
                        // ImageIcon imageIcon = new ImageIcon(new ImageIcon(VCardDadosUsuario.getAvatar()).getImage().getScaledInstance(69, 39, Image.SCALE_DEFAULT));
                        ImageIcon imageIcon = new IconeCircular().ArredondarIconeByte(VCardDadosUsuario.getAvatar(), 69, 39, 60);
                        btDadosUsuario.setIcon(imageIcon);
                    }
                }

                MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Usuário modificado com sucesso", "Procedimento OK");

            }
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
    }//GEN-LAST:event_btDadosUsuarioActionPerformed

    private void btAdicionarContatoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAdicionarContatoActionPerformed
        // TODO add your handling code here:
        try {

            frmChatAdicionarContato adicionarContato = new frmChatAdicionarContato(null, true);
            adicionarContato.setVisible(true);
            if (adicionarContato.ok) {
                if (smackMensageria.checkIfUserExists(adicionarContato.txtUsuario1.getText())) {

                    smackMensageria.adicionarContato(adicionarContato.txtUsuario1.getText(), adicionarContato.txtUsuarioNome.getText());
                } else {
                    MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("O usuário informado não existe", "Usuário inexistente");
                }
            }

        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
    }//GEN-LAST:event_btAdicionarContatoActionPerformed

    private void btRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRemoverActionPerformed
        // TODO add your handling code here:
        //   if (txtMensagem.getText() != null && txtMensagem.getText().trim().length() > 0) {
        SmackListItemContato selectedValue = jlContatos.getSelectedValue();
        if (selectedValue != null) {
            if (MetodosUI_Auxiliares_1.MensagemAoUsuarioOpcoes_Sim_e_Nao("Confirma a exclusão do contato??", "Remover contato") == MetodosUI_Auxiliares_1.Sim()) {
                if (!smackMensageria.removerContato(selectedValue.getUsuario())) {
                    MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Não foi possível excluir o contato", "Procedimento não realizado");
                }
            }
        }
        // }

    }//GEN-LAST:event_btRemoverActionPerformed

    private void jlConversaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlConversaMouseClicked
        // TODO add your handling code here:


    }//GEN-LAST:event_jlConversaMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        CardLayout card = (CardLayout) PainelCorpo.getLayout();
        card.show(PainelCorpo, "PainelContatos");
        selectedtemContato = null;

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jlContatosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlContatosMouseClicked
        // TODO add your handling code here:
        try {

            if (evt.getClickCount() == 2) {
                selectedtemContato = jlContatos.getSelectedValue();
                if (selectedtemContato != null) {

                    lblFotoContato.setIcon(selectedtemContato.getImageIcon());
                    lblNomeContato.setText(selectedtemContato.getNome());
                    CardLayout card = (CardLayout) PainelCorpo.getLayout();
                    String usuario = selectedtemContato.getUsuario();
                    card.show(PainelCorpo, "PainelConversa");
                    atualizarJlMensagens(usuario);

                    if (qtmensagemNaoLidas.containsKey(usuario)) {
                        qtmensagemNaoLidas.put(usuario, 0);
                        exibirNotificarMensagemRecebida(usuario);
                    }
                    jlConversa.ensureIndexIsVisible(jlConversa.getModel().getSize() - 1);
                    txtMensagem.requestFocus();
                }
            }
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }

    }//GEN-LAST:event_jlContatosMouseClicked

    private void lblLogoMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblLogoMouseDragged
        // TODO add your handling code here:

        this.setLocation(evt.getLocationOnScreen());
    }//GEN-LAST:event_lblLogoMouseDragged

    private void btOcultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btOcultarActionPerformed
        // TODO add your handling code here:
        try {
            CardLayout card = (CardLayout) PainelCorpo.getLayout();
            card.show(PainelCorpo, "PainelContatos");
            selectedtemContato = null;
            setState(JFrame.ICONIFIED);
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }

    }//GEN-LAST:event_btOcultarActionPerformed

    private void lblConectadoMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblConectadoMouseDragged
        // TODO add your handling code here:
    }//GEN-LAST:event_lblConectadoMouseDragged
    private StanzaListener stanzaListener;

    private StanzaListener getStanzaListener() {
        try {

            if (stanzaListener == null) {
                stanzaListener = new StanzaListener() {
                    @Override
                    public void processPacket(Stanza packet) throws SmackException.NotConnectedException {

                        System.out.println(packet.getTo());

                        String pacote = packet.toString();
                        try {
                            ManipularXML mxml = new ManipularXML("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" + pacote);
                            NodeList localizarTagXML = mxml.localizarTagXML("/presence/@type");
                            if (localizarTagXML != null && localizarTagXML.getLength() > 0) {
                                String tipoPacote = "";
                                String toPacote = "";
                                String fromPacote = "";
                                tipoPacote = localizarTagXML.item(0).getTextContent();
                                toPacote = mxml.localizarTagXML("/presence/@to").item(0).getTextContent();
                                fromPacote = mxml.localizarTagXML("/presence/@from").item(0).getTextContent();
                                if (tipoPacote.equalsIgnoreCase("subscribe")) {

                                    smackMensageria.enviarPresenca(fromPacote, Presence.Mode.available, Presence.Type.subscribe);
                                    smackMensageria.enviarPresenca(fromPacote, Presence.Mode.available, Presence.Type.subscribed);
                                } else if (tipoPacote.equalsIgnoreCase("unsubscribe")) {
                                    smackMensageria.enviarPresenca(fromPacote, Presence.Mode.available, Presence.Type.unsubscribed);
                                    // smackMensageria.enviarPresenca(fromPacote, Presence.Mode.available, Presence.Type.unsubscribed);
                                    //smackMensageria.removerContato(fromPacote);
                                    //fromPacote = mxml.localizarTagXML("/presence/@from").item(0).getTextContent();
                                    //smackMensageria.enviarPresenca(toPacote, Presence.Mode.available, Presence.Type.unsubscribed);

                                }
                            }

                        } catch (ParserConfigurationException ex) {
                            LogDinnamus.Log(ex, true);
                        } catch (SAXException ex) {
                            LogDinnamus.Log(ex, true);
                        } catch (IOException ex) {
                            LogDinnamus.Log(ex, true);
                        }
                    }
                };
            }

            return stanzaListener;
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
            return null;
        }
    }

    private RosterListener rosterListener;

    private RosterListener getRosterListener() {

        if (rosterListener == null) {
            rosterListener = new RosterListener() {
                @Override
                public void entriesAdded(Collection<String> addresses) {
                    //System.out.println(".entriesAdded()");
                    //for (String addresse : addresses) {
                    //    smackMensageria.enviarSolicitacaoPresenca(addresse);
                    // }
                    //smackMensageria.definirTipoDePresenca(usuario, Presence.Type.subscribe);
                    listarUsuario();
                    //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }

                @Override
                public void entriesUpdated(Collection<String> addresses) {
                    // System.out.println(".entriesUpdated()");
                    listarUsuario();
                    //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }

                @Override
                public void entriesDeleted(Collection<String> addresses) {
                    //System.out.println(".entriesDeleted()");

                    listarUsuario();
                    //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }

                @Override
                public void presenceChanged(Presence presence) {

                    listarUsuario();
                }
            };
        }
        return rosterListener;
    }

    private HashMap<String, SmackListItemContato> getContatos() {
        if (contatos == null) {
            contatos = new HashMap<>();
        }
        return contatos;
    }
    //public 

    private boolean definirStatusUsuario(boolean status) {
        try {

            ListModel<SmackListItemContato> modeljlContatos = jlContatos.getModel();
            if (modeljlContatos != null && modeljlContatos.getSize() > 0) {
                for (int i = 0; i < modeljlContatos.getSize(); i++) {
                    SmackListItemContato item = modeljlContatos.getElementAt(i);
                    if (status) {
                        item.setImageIconStatus(new javax.swing.ImageIcon(getClass().getResource("/smack/ui/online.png"))); // NOI18N
                    } else {
                        item.setImageIconStatus(new javax.swing.ImageIcon(getClass().getResource("/smack/ui/offline.png"))); // NOI18N
                    }
                }
            }
            jlContatos.setModel(modeljlContatos);
            jlContatos.invalidate();
            jlContatos.validate();
            jlContatos.repaint();

            return true;
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
            return false;
        }
    }

    private boolean atualizarJlUsuarios(Collection<RosterEntry> usuariosServidor) {
        try {

            DefaultListModel<SmackListItemContato> defaultListModel = new DefaultListModel<>();
            String nomeUsuario = "";
            int i = 0;
            for (RosterEntry rosterEntry : usuariosServidor) {
                SmackListItemContato item = new SmackListItemContato();
                item.setId(i);
                item.setUsuario(rosterEntry.getUser());
                if (rosterEntry.getName() != null) {
                    item.setNome(rosterEntry.getName());
                } else {
                    String[] splitgetUser = rosterEntry.getUser().split("@");
                    if (splitgetUser != null && splitgetUser.length > 0) {
                        item.setNome(splitgetUser[0]);
                    }
                }
                if (iniciando) {
                    if (qtmensagemNaoLidas.containsKey(item.getUsuario())) {
                        Integer qtMensagensNaoLidas = qtmensagemNaoLidas.get(item.getUsuario());
                        item.setQtMensagemNaoLidas(qtMensagensNaoLidas);
                    }
                    if (conversasDoChat.containsKey(item.getUsuario())) {

                        ArrayList<SmackMensagem> MensagensDoChat = conversasDoChat.get(item.getUsuario());
                        if (MensagensDoChat != null && !MensagensDoChat.isEmpty()) {
                            SmackMensagem getUltimaMsg = MensagensDoChat.get(MensagensDoChat.size() - 1);
                            item.setUltimaMensagemNaoLida(getUltimaMsg.getMsg());
                        }
                    }

                }
                String bareJID = rosterEntry.getUser();
                Presence presence = smackMensageria.getRoster().getPresence(bareJID);
                if (presence.isAvailable()) {
                    item.setImageIconStatus(new javax.swing.ImageIcon(getClass().getResource("/smack/ui/online.png"))); // NOI18N
                } else {
                    item.setImageIconStatus(new javax.swing.ImageIcon(getClass().getResource("/smack/ui/offline.png"))); // NOI18N
                }
                if (!presence.isAvailable() && !getContatos().isEmpty()) {
                    if (getContatos().containsKey(bareJID)) {
                        SmackListItemContato getContato = getContatos().get(bareJID);
                        item.setImageIcon(getContato.getImageIcon());
                        item.setNickname(getContato.getNickname());
                    }
                } else if (bareJID != null) {
                    VCard vCard = smackMensageria.getVCard(bareJID);
                    byte[] avatar = vCard.getAvatar();
                    ImageIcon imageIcon = null;
                    if (avatar != null && avatar.length > 0) {
                        imageIcon = iconeCircular.ArredondarIconeByte(avatar, 69, 39, 30);
                    } else {
                        imageIcon = iconeCircular.ArredondarIcone("/smack/ui/icons8-mao-no-rosto-30.png", 69, 39, 30);
                    }
                    item.setImageIcon(imageIcon);
                    item.setNickname(vCard.getNickName());
                }
                defaultListModel.addElement(item);
                if (getContatos().containsKey(bareJID)) {
                    getContatos().replace(bareJID, item);
                } else {
                    getContatos().put(bareJID, item);
                }
                i++;
            }
            jlContatos.setModel(defaultListModel);
            jlContatos.setCellRenderer(new SmackListRender());
            return true;
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return false;
    }

    private synchronized boolean listarUsuario() {
        try {
            if (smackMensageria.getConnection().isConnected()) {
                Collection<RosterEntry> contatosDoUsuario = smackMensageria.getUsuariosServidor();
                if (contatosDoUsuario != null && !contatosDoUsuario.isEmpty()) {
                    return atualizarJlUsuarios(contatosDoUsuario);
                } else {
                    jlContatos.setModel(new DefaultListModel<>());
                }
            }

            return true;
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return false;
    }

    private boolean atualizarJlMensagens(String participante) {
        try {

            ArrayList<SmackMensagem> getConversas = conversasDoChat.get(participante);
            if (getConversas != null) {
                DefaultListModel<SmackMensagem> defaultListModel = new DefaultListModel<>();

                int i = 0;
                for (SmackMensagem msg : getConversas) {
                    defaultListModel.addElement(msg);
                    i++;
                }

                HashMap<String, Icon> imagens = new HashMap<>();
                if (btDadosUsuario.getIcon() != null) {
                    imagens.put("enviada", iconeCircular.ArredondarImagem((ImageIcon) btDadosUsuario.getIcon(), 30));
                }
                if (selectedtemContato.getImageIcon() != null) {
                    imagens.put("recebida", iconeCircular.ArredondarImagem((ImageIcon) selectedtemContato.getImageIcon(), 30));
                }
                imagens.put("semimagem", iconeCircular.ArredondarImagem(new javax.swing.ImageIcon(getClass().getResource("/smack/ui/icons8-usuário-30.png")), 30));

                jlConversa.setModel(defaultListModel);
                jlConversa.setCellRenderer(new SmackListRenderMensagem(imagens));
                jlConversa.ensureIndexIsVisible(jlConversa.getModel().getSize() - 1);

                jlConversa.invalidate();
                jlConversa.validate();
                jlConversa.repaint();

            } else {
                jlConversa.setModel(new DefaultListModel<>());
            }
            return true;
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return false;
    }
    
    private boolean processarMensagemEnviada(Message m, String usuario) {
        try {
            //Chat chat = chatsAbertos.ge
            String participante = m.getTo();
            SmackMensagem mensagem = new SmackMensagem();
            if (!conversasDoChat.containsKey(usuario)) {
                conversasDoChat.put(usuario, new ArrayList<SmackMensagem>());
            }

            mensagem.setId(conversasDoChat.get(usuario).size() + 1);
            mensagem.setMsg(m);
            mensagem.setStanzaID(m.getStanzaId());
            mensagem.setIDMensagem(m.getStanzaId());
            mensagem.setDatahoraEnviada(new Date());
            mensagem.setTipo("Enviada");
            conversasDoChat.get(usuario).add(mensagem);

            return true;
        } catch (Exception e) {
            LogDinnamus.Log(e);
        }
        return false;
    }

    private boolean processarMensagemRecebida(Chat chat, Message msg, boolean AculumarMensagensRecebidas) {
        try {
            
            //enviarNotificacaoMensagemRecebida(chat, msg);
            
            String participante = chat.getParticipant().replace("/Smack", "");
            if (!conversasDoChat.containsKey(participante)) {
                conversasDoChat.put(participante, new ArrayList<SmackMensagem>());
            }
            DefaultExtensionElement extTime = (DefaultExtensionElement) msg.getExtension("urn:xmpp:time");

            SmackMensagem mensagem = new SmackMensagem();
            mensagem.setId(conversasDoChat.get(participante).size() + 1);
            mensagem.setMsg(msg);
            mensagem.setStanzaID(msg.getStanzaId());
            String dataHoraEnviada;
            if (extTime != null) {
                dataHoraEnviada = extTime.getValue("time");
                mensagem.setDatahoraEnviada(new Date(new Long(dataHoraEnviada)));
            }
            mensagem.setDatahorarecebida(new Date());
            mensagem.setTipo("Recebida");
            conversasDoChat.get(participante).add(mensagem);

            if (AculumarMensagensRecebidas) {
                if (!qtmensagemNaoLidas.containsKey(participante)) {
                    qtmensagemNaoLidas.put(participante, 0);
                }
                qtmensagemNaoLidas.replace(participante, qtmensagemNaoLidas.get(participante) + 1);
            }

            return true;
        } catch (Exception e) {
            LogDinnamus.Log(e);
        }
        return false;
    }

    private boolean enviarNotificacaoMensagemRecebida(Chat chat, Message msg){
        try {
            
           // chat.sendMessage(msg);
            Message message = new Message(msg.getTo());
            message.addBody("EN", String.valueOf(new Date().getTime()));
            String deliveryReceiptId = DeliveryReceiptRequest.addTo(message);
            chat.sendMessage(message);
            
            return true;
        } catch (Exception e) {
              LogDinnamus.Log(e);
              return false;
        }
    }
    private boolean exibirNotificarMensagemRecebida(String participante) {
        try {

            participante = participante.replace("/Smack", "");

            SmackListItemContato get = contatos.get(participante);

            Integer qtMensagensNaoLidas = qtmensagemNaoLidas.get(participante);
            ArrayList<SmackMensagem> MensagensDoChat = conversasDoChat.get(participante);
            ListModel<SmackListItemContato> model = jlContatos.getModel();

            for (int i = 0; i < model.getSize(); i++) {

                SmackListItemContato item = model.getElementAt(i);
                if ((item.getUsuario()).equalsIgnoreCase(participante)) {
                    System.out.println("Lendo mensagem recebidas : " + participante);
                    System.out.println("qtd mensagem recebidas : " + qtMensagensNaoLidas);
                    if (qtMensagensNaoLidas > 0) {
                        item.setQtMensagemNaoLidas(qtMensagensNaoLidas);
                        SmackMensagem getSmackMensagem = MensagensDoChat.get(MensagensDoChat.size() - 1);
                        item.setUltimaMensagemNaoLida(getSmackMensagem.getMsg());
                    } else {
                        item.setQtMensagemNaoLidas(null);
                        item.setUltimaMensagemNaoLida(null);
                    }
                    break;
                }

            }

            jlContatos.setModel(model);
            jlContatos.invalidate();
            jlContatos.validate();
            jlContatos.repaint();

            return true;
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return true;
    }

    private ConnectionListener connectionListener;

    private ConnectionListener getConnectionListener() {
        try {

            if (connectionListener == null) {
                connectionListener = new ConnectionListener() {
                    @Override
                    public void connected(XMPPConnection connection) {
                        smackMensageria.setStatusConexao(StatusConexao.connected);
                        lblConectado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smack/ui/online.png"))); // NOI18N
                    }

                    @Override
                    public void authenticated(XMPPConnection connection, boolean resumed) {
                        smackMensageria.setStatusConexao(StatusConexao.authenticated);
                        if (resumed) {
                            listarUsuario();
                        }

                        lblConectado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smack/ui/online.png"))); // NOI18N

                    }

                    @Override
                    public void connectionClosed() {
                        smackMensageria.setStatusConexao(StatusConexao.connectionClosed);
                        lblConectado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smack/ui/offline.png")));
                        definirStatusUsuario(false);
                        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    }

                    @Override
                    public void connectionClosedOnError(Exception e) {
                        definirStatusUsuario(false);
                        smackMensageria.setStatusConexao(StatusConexao.connectionClosedOnError);
                        lblConectado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smack/ui/offline.png")));

                        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    }

                    @Override
                    public void reconnectionSuccessful() {
                        //definirStatusUsuario(true);
                        smackMensageria.setStatusConexao(StatusConexao.reconnectionSuccessful);
                        //List<Message> mensagensOffline = smackMensageria.getMensagensOffline();
                        //listarUsuario();
                        lblConectado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smack/ui/online.png")));
                        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    }

                    @Override
                    public void reconnectingIn(int seconds) {
                        //definirStatusUsuario(false);
                        smackMensageria.setStatusConexao(StatusConexao.reconnectingIn);
                        lblConectado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smack/ui/reconect.png")));
                        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    }

                    @Override
                    public void reconnectionFailed(Exception e) {
                        //definirStatusUsuario(false);
                        smackMensageria.setStatusConexao(StatusConexao.reconnectionFailed);
                        lblConectado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smack/ui/offline.png")));
                        // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    }
                };
            }

        } catch (Exception e) {
            LogDinnamus.Log(e, true);
            return null;
        }
        return connectionListener;
    }

    private SmackMensagem localizarMensagem(String idMensagem, String idusuario){
        SmackMensagem ret =null;
        try {
            ArrayList<SmackMensagem> getMensagens = conversasDoChat.get(idusuario.replace("/Smack", ""));
            for (SmackMensagem mensagen : getMensagens) {
                if(mensagen.getStanzaID()!=null && mensagen.getStanzaID().equalsIgnoreCase(idMensagem)){
                    ret = mensagen;
                    break;
                }
            }
            
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return ret;
    } 
    
    
    private boolean iniciarConfirmacaoDeEntrega(){
        try {
            DeliveryReceiptManager dm = DeliveryReceiptManager
                    .getInstanceFor(smackMensageria.getConnection());
            dm.autoAddDeliveryReceiptRequests();
            dm.setAutoReceiptMode(AutoReceiptMode.always);
            dm.addReceiptReceivedListener(new ReceiptReceivedListener() {
                @Override
                public void onReceiptReceived(final String fromid, final String toid, final String msgid, final Stanza packet) {
                    SmackMensagem localizarMensagem = localizarMensagem(msgid, fromid);
                    if(localizarMensagem!=null){
                        
                    }
                    
                }
            });
            
            

            return true;
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
            return false;
        }
    }
    private boolean TestarConexao(String local) {
        try {
            URL url = new URL(local);
            URLConnection connection = url.openConnection();
            connection.setReadTimeout(5000);
            connection.connect();
            return true;
        } catch (Exception e) {
            LogDinnamus.Log(e, false);
            return false;
        }
    }

    private Reconectar reconectar =null;
    private Reconectar getReconectar(){
        if(reconectar==null){
            reconectar = new Reconectar(smackMensageria.getConnection(), 5, new ConnectionListener() {
                @Override
                public void connected(XMPPConnection connection) {
                    //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }

                @Override
                public void authenticated(XMPPConnection connection, boolean resumed) {
                    //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }

                @Override
                public void connectionClosed() {
                    //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }

                @Override
                public void connectionClosedOnError(Exception e) {
                    //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }

               @Override
                    public void reconnectionSuccessful() {
                        //definirStatusUsuario(true);
                        smackMensageria.setStatusConexao(StatusConexao.reconnectionSuccessful);
                        //listarUsuario();
                        lblConectado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smack/ui/online.png")));
                        reconectando=false;
                      
                        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    }

                    @Override
                    public void reconnectingIn(int seconds) {
                        //definirStatusUsuario(false);
                        smackMensageria.setStatusConexao(StatusConexao.reconnectingIn);
                        lblConectado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smack/ui/reconect.png")));
                        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    }

                    @Override
                    public void reconnectionFailed(Exception e) {
                        //definirStatusUsuario(false);
                        reconectando=false;
                        smackMensageria.setStatusConexao(StatusConexao.reconnectionFailed);
                        lblConectado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smack/ui/offline.png")));
                        // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    }
            });
        }
        return reconectar;
    }
    private ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1);
    private boolean reconectando = false;
    private boolean TarefaVerificarConexaoIniciar(final int intervaloSegundos) {
        try {

            new  Thread(new Runnable() {
                @Override
                public void run() {
                    try {
                        while(true){
                        if (smackMensageria.getStatusConexao() == StatusConexao.authenticated
                                || smackMensageria.getStatusConexao() == StatusConexao.reconnectionSuccessful
                                || smackMensageria.getStatusConexao() == StatusConexao.reconnectionFailed) {
                            System.out.print("Testando conexao....");
                            //
                            if (TestarConexao("http://" + smackMensageria.getConnection().getHost()) && smackMensageria.getConnection().isConnected()) {
                                System.out.println("OK");
                              
                            } else {
                                //if(!reconectando){
                                //   reconectando=true;
                                if(!getReconectar().TarafeAtiva()){
                                   lblConectado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smack/ui/offline.png")));
                                   smackMensageria.getConnection().disconnect();
                                   getReconectar().reconnect();
                                }
                                  
                                //}
                               
                            }

                        }
                        Thread.sleep(intervaloSegundos*1000);
                        }
                    } catch (Exception ex) {
                        LogDinnamus.Log(ex, false);
                    }
                }
            }).start();

            return true;
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
            return false;
        }
    }

    private PingManager pingManager = null;

    private PingManager getPingManager() {
        try {

            if (pingManager == null) {
                pingManager = PingManager.getInstanceFor(smackMensageria.getConnection());;
            }

        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return pingManager;
    }

    private boolean monitorarConexao() {
        try {

            if (connectionListener == null) {
                smackMensageria.getConnection().addConnectionListener(getConnectionListener());
            }
            return true;
        } catch (Exception e) {
            LogDinnamus.Log(e, true);;
            return false;
        }
    }

    private boolean gerenciarPing() {
        try {

            if (pingManager == null) {
                pingManager = getPingManager();
            }
            return true;
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
            return false;
        }
    }

    private boolean monitorarEntradaChat() {
        try {
            // smackMensageria.getConnection().addConnectionListener(new ConnectionListener);
            smackMensageria.monitorarEntradaDeChat(new ChatManagerListener() {
                @Override
                public void chatCreated(Chat chat, boolean createdLocally) {
                    System.out.println(chat.getParticipant());
                    chat.addMessageListener(new ChatMessageListener() {
                        @Override
                        public void processMessage(Chat arg0, Message arg1) {
                            boolean AcumularQt = false;
                            
                            System.out.println("Mensagem recebida : " + arg1.getBody());
                            if (arg1.getBody()!=null && !arg1.getBody().isEmpty()) {

                                if (selectedtemContato == null || iniciando) {
                                    AcumularQt = true;
                                }
                                if (_frmCarregandoChat != null) {
                                    _frmCarregandoChat.lblMensagem2.setText("obtendo mensagens recebidas");
                                }
                                String participante = arg0.getParticipant().replace("/Smack", "");
                                processarMensagemRecebida(arg0, arg1, AcumularQt);
                                if (AcumularQt) {
                                    System.out.println("AcumularQT");
                                    exibirNotificarMensagemRecebida(participante);
                                } else {
                                    atualizarJlMensagens(participante);
                                }
                                if (getState() == JFrame.ICONIFIED) {
                                    setState(JFrame.NORMAL);
                                }
                            
                           }
                        }
                    });
                    //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }
            });

            return true;
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return false;
    }

    private boolean iniciarChat(String nomeUsuarioParticipante) {
        try {

            Chat chat = smackMensageria.iniciarChat(nomeUsuarioParticipante + "/Smack");
            //chat.addMessageListener(listener);
            if (chat != null) {
                chatsAbertos.put(nomeUsuarioParticipante, chat);
            }

            return true;
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return false;
    }

    private boolean conectarServidor(String usuario, String senha, Map<String, String> atributos) {
        try {
            if (smackMensageria.conectarServidor(nomeServico, servidorOpenFire, porta, usuarioServidor, senhaServidor, getConnectionListener())) {
                boolean logarUsuario = smackMensageria.logarUsuario(usuario, senha, Presence.Type.available, "Online", atributos);
                if (!logarUsuario) {
                    _frmCarregandoChat.dispose();
                    MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Não foi possível logar o usuário", "Conectar servidor");
                    return false;

                }

                monitorarEntradaChat();

                if (!TarefaVerificarConexaoIniciar(10)) {
                    _frmCarregandoChat.dispose();
                    MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Não foi possível iniciar a tarefe de verificação de conexão", "Conectar servidor");
                    return false;
                }

                if (iniciar) {
                    HashMap<String, String> atributosUsuario = new HashMap<>();
                    atributosUsuario.put("nickname", this.nome);
                    if (!smackMensageria.modificarAtributos(atributosUsuario)) {
                        if (_frmCarregandoChat != null) {
                            _frmCarregandoChat.dispose();
                        }
                        MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Não foi possível definir a imagem do usuário", "Atributos não modificados");
                        return false;
                    }
                    if (this.nomeArquivoAvatar != null && this.nomeArquivoAvatar.trim().length() > 0) {
                        if (!smackMensageria.definirAvatar(this.nomeArquivoAvatar)) {
                            _frmCarregandoChat.dispose();
                            MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Não foi possível modificar a imagem do usuário", "Atributos não modificados");

                            return false;
                        }
                    }
                }

                _frmCarregandoChat.lblMensagem2.setText("obtendo contatos do usuário....");
                if (!listarUsuario()) {
                    _frmCarregandoChat.dispose();
                    return false;
                }

                VCardDadosUsuario = smackMensageria.getVCard();
                if (VCardDadosUsuario.getAvatar() != null && VCardDadosUsuario.getAvatar().length > 0) {
                    //  ImageIcon imageIcon = new ImageIcon(new ImageIcon(VCardDadosUsuario.getAvatar()).getImage().getScaledInstance(69, 39, Image.SCALE_DEFAULT));
                    ImageIcon imageIcon = iconeCircular.ArredondarIconeByte(VCardDadosUsuario.getAvatar(), 69, 39, 60);
                    btDadosUsuario.setIcon(imageIcon);
                } else {
                    //ImageIcon imageIcon = new javax.swing.ImageIcon(getClass().getResource());
                    //imageIcon = new ImageIcon( imageIcon.getImage().getScaledInstance(69, 39, Image.SCALE_DEFAULT));

                    ImageIcon imageIcon = iconeCircular.ArredondarIcone("/smack/ui/icons8-mao-no-rosto-30.png", 69, 39, 60);
                    btDadosUsuario.setIcon(imageIcon); // NOI18N

                }

                if (VCardDadosUsuario.getNickName() != null && VCardDadosUsuario.getNickName().length() > 0) {
                    txtUsuario.setText(VCardDadosUsuario.getNickName());
                }

                if (stanzaListener == null) {
                    smackMensageria.getConnection().addAsyncStanzaListener(getStanzaListener(), null);
                }
                if (rosterListener == null) {
                    /*smackMensageria.getRoster().addRosterLoadedListener(new RosterLoadedListener() {
                        @Override
                        public void onRosterLoaded(Roster roster) {

                            //listarUsuario();
                            // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                        }
                    });*/
                    smackMensageria.getRoster().addRosterListener(getRosterListener());

                }

                if(!iniciarConfirmacaoDeEntrega()){
                     MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Não foi possível iniciar o modulo de confirmação de mensagens entregues", "Atributos não modificados");
                    return false;
                }
                
                //if(!gerenciarPing()){return false;}
                return logarUsuario;
            }
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return false;
    }

    //private PacketListener packetListener;
    public boolean iniciarUIConversas() {
        try {

            return true;
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return false;

    }

    private void iniciar() {

        new Thread(new Runnable() {
            @Override
            public void run() {
                LogDinnamus.Iniciar();

                boolean iniciar = false;

                try {
                    if (!ManipulacaoArquivo.ArquivoExiste("configuracoes.properties", false)) {
                        String conteudo = "nomeServico = dinnamus" + ManipulacaoArquivo.newline
                                + "servidorOpenFire ip193.ip-142-44-146.net" + ManipulacaoArquivo.newline
                                + "portaServidor = 5222" + ManipulacaoArquivo.newline
                                + "usuarioServidor = admin" + ManipulacaoArquivo.newline
                                + "senhaServidor = dti360@@" + ManipulacaoArquivo.newline
                                + "usuario = " + ManipulacaoArquivo.newline
                                + "senha = " + ManipulacaoArquivo.newline
                                + "nome = " + ManipulacaoArquivo.newline;

                        if (!ManipulacaoArquivo.CriarArquivo("configuracoes.properties", conteudo.getBytes("UTF8"))) {
                            MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesAVISO("Não foi possível criar o arquivo de configurações", "Inicialização com problema");
                            System.exit(0);
                        }
                    }

                    Propriedades p = new Propriedades();
                    Properties propriedades = p.getPropriedadesPorArquivo("configuracoes.properties");
                    String nomeArquivoAvatar = null;
                    String usuario = propriedades.getProperty("usuario");
                    if (usuario != null && usuario.trim().length() == 0) {
                        frmChatCadastrarUsuario frmChatCadastrarUsuario = new frmChatCadastrarUsuario(null, true, null, null, null);
                        frmChatCadastrarUsuario.PainelAvatar.setVisible(false);
                        frmChatCadastrarUsuario.setVisible(true);
                        if (frmChatCadastrarUsuario.ok) {
                            String senha = String.valueOf(frmChatCadastrarUsuario.txtSenha.getPassword());
                            p.setPropriedades("configuracoes.properties", "usuario", frmChatCadastrarUsuario.txtUsuario1.getText());
                            p.setPropriedades("configuracoes.properties", "senha", senha);
                            p.setPropriedades("configuracoes.properties", "nome", frmChatCadastrarUsuario.txtUsuarioNome.getText());
                            propriedades = p.getPropriedadesPorArquivo("configuracoes.properties");
                            nomeArquivoAvatar = frmChatCadastrarUsuario.nomeArquivoAvatar;
                            iniciar = true;
                        } else {
                            //_frmCarregandoChat.setVisible(false);
                            MetodosUI_Auxiliares_1.MensagemAoUsuarioSimplesINFO("Não será possivel prosseguir sem cadastrar o usuário", "Usuário não informado");
                            System.exit(0);
                        }
                    }

                    String nomeServico1 = propriedades.getProperty("nomeServico");
                    String servidorOpenFire1 = propriedades.getProperty("servidorOpenFire");; //"ip193.ip-142-44-146.net";
                    Integer porta1 = Integer.valueOf(propriedades.getProperty("portaServidor"));
                    String usuario1 = propriedades.getProperty("usuarioServidor");
                    String senha1 = propriedades.getProperty("senhaServidor");

                    String usuariochat = propriedades.getProperty("usuario");
                    String senhachat = propriedades.getProperty("senha");
                    String nomechat = propriedades.getProperty("nome");

                    frmChat dialog = new frmChat(new javax.swing.JFrame(), true, nomeServico1,
                            servidorOpenFire1, porta1, usuario1, senha1, usuariochat,
                            senhachat, nomechat, nomeArquivoAvatar, iniciar);

                    dialog.setLocationRelativeTo(null);
                    dialog.setVisible(true);

                } catch (Exception e) {
                    LogDinnamus.Log(e, true);

                }
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        }).start();

    }

    public boolean iniciarUI() {
        try {

            if (!iniciarUIConversas()) {
                return false;
            }

            CardLayout card = (CardLayout) PainelCorpo.getLayout();
            card.show(PainelCorpo, "PainelContatos");

            btConectarActionPerformed(null);

            _frmCarregandoChat.dispose();
            _frmCarregandoChat = null;

            return true;
        } catch (Exception e) {
            LogDinnamus.Log(e, true);
        }
        return false;

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmChat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmChat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmChat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmChat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        frmChat chat = new frmChat();
        chat.iniciar();

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Contatos;
    private javax.swing.JPanel Conversa;
    private javax.swing.JPanel Mensagem;
    private javax.swing.JPanel PainelContatoConversa;
    private javax.swing.JPanel PainelCorpo;
    private javax.swing.JPanel PainelMensagem;
    private javax.swing.JPanel PainelNovoContato;
    private javax.swing.JPanel PainelPrincipal;
    private javax.swing.JPanel PainelTitulo;
    private javax.swing.JPanel PainelUsuario;
    private javax.swing.JButton btAdicionarContato;
    private javax.swing.JButton btConectar;
    private javax.swing.JButton btDadosUsuario;
    private javax.swing.JButton btEnviar;
    private javax.swing.JButton btFechar1;
    private javax.swing.JButton btOcultar;
    private javax.swing.JButton btRemover;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<SmackListItemContato> jlContatos;
    private javax.swing.JList<smack.br.ui.SmackMensagem> jlConversa;
    private javax.swing.JLabel lblConectado;
    private javax.swing.JLabel lblFotoContato;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JLabel lblNomeContato;
    private javax.swing.JTextArea txtMensagem;
    private javax.swing.JLabel txtUsuario;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the smackListItem
     */
    public SmackMensagem getSmackListItem() {
        return smackListItem;
    }

    /**
     * @param smackListItem the smackListItem to set
     */
    public void setSmackListItem(SmackMensagem smackListItem) {
        this.smackListItem = smackListItem;
    }
}
